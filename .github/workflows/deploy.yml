name: CI/CD - Deploy to AWS

on:
  push:
    branches:
      - main

env:
  TERRAFORM_VERSION: '1.5.0'
  NODE_VERSION: '20'
  PNPM_VERSION: 'latest-10'
  DOTNET_VERSION: '9.0.x'

jobs:
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Cache Terraform providers
        uses: actions/cache@v3
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform

      - name: Terraform Plan
        run: terraform plan -input=false
        working-directory: terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false
        working-directory: terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Generate SSH public key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          ssh-keygen -y -f private_key.pem > public_key.pub
        id: generate_pub_key

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: |
          npm install --global corepack@latest
          corepack enable pnpm
          corepack use pnpm@${{ env.PNPM_VERSION }}

      - name: Install frontend dependencies and build
        working-directory: frontend
        run: |
          pnpm install
          pnpm build

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Publish backend API
        working-directory: backend
        run: dotnet publish -c Release -o publish

      - name: Run Ansible deployment
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: ansible/deploy.yml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          inventory: |
            [all]
            ${{ env.EC2_IP }} ansible_user=ec2-user